// Service pour r√©cup√©rer les vraies donn√©es m√©t√©o via OpenWeatherMap
export interface RealWeatherData {
  temperature: number;
  rainfall: number;
  humidity: number;
  location: {
    lat: number;
    lng: number;
  };
  timestamp: number;
  description: string;
}

export class RealWeatherAPIService {
  private apiKey: string;
  private cache: Map<string, { data: RealWeatherData; timestamp: number }> = new Map();
  private readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

  constructor(apiKey: string = '0dbe8612a65b424ffc1c4b394171a388') {
    this.apiKey = apiKey;
  }

  /**
   * R√©cup√©rer les vraies donn√©es m√©t√©o actuelles
   */
  async getCurrentWeather(lat: number, lng: number): Promise<RealWeatherData> {
    console.log("üå§Ô∏è R√©cup√©ration des donn√©es m√©t√©o...");
    console.log("üìç Position:", { lat, lng });

    // V√©rifier le cache d'abord
    const cacheKey = `${lat.toFixed(4)},${lng.toFixed(4)}`;
    const cached = this.cache.get(cacheKey);
    
    if (cached && (Date.now() - cached.timestamp) < this.CACHE_DURATION) {
      console.log("üì¶ Donn√©es r√©cup√©r√©es du cache");
      return cached.data;
    }

    try {
      // Utiliser la vraie API OpenWeatherMap
      const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${this.apiKey}&units=metric`;
      
      console.log("üîó Appel API OpenWeatherMap...");
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`Erreur API: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log("üìä Donn√©es API re√ßues:", data);

      const weatherData: RealWeatherData = {
        temperature: Math.round(data.main.temp * 10) / 10,
        rainfall: this.extractRainfall(data),
        humidity: data.main.humidity,
        location: { lat, lng },
        timestamp: Date.now(),
        description: data.weather[0].description,
      };

      // Mettre en cache
      this.cache.set(cacheKey, { data: weatherData, timestamp: Date.now() });
      
      console.log("‚úÖ Donn√©es m√©t√©o r√©cup√©r√©es:", weatherData);
      return weatherData;
    } catch (error) {
      console.error("‚ùå Erreur API m√©t√©o:", error);
      console.log("üîÑ Utilisation des donn√©es de fallback...");
      
      // Utiliser des donn√©es de fallback coh√©rentes
      const fallbackData = this.getConsistentFallbackData(lat, lng);
      
      // Mettre en cache m√™me les donn√©es de fallback
      this.cache.set(cacheKey, { data: fallbackData, timestamp: Date.now() });
      
      return fallbackData;
    }
  }

  /**
   * Extraire les donn√©es de pluviom√©trie
   */
  private extractRainfall(data: any): number {
    // OpenWeatherMap ne fournit pas toujours les donn√©es de pluie
    // On utilise les donn√©es de pr√©cipitation si disponibles
    if (data.rain && data.rain['1h']) {
      return Math.round(data.rain['1h'] * 10) / 10;
    }
    if (data.rain && data.rain['3h']) {
      return Math.round(data.rain['3h'] / 3 * 10) / 10; // Convertir 3h en 1h
    }
    // Fallback bas√© sur la description m√©t√©o
    const description = data.weather[0].description.toLowerCase();
    if (description.includes('rain') || description.includes('drizzle')) {
      return Math.round(Math.random() * 10 * 10) / 10; // 0-10mm
    }
    return 0;
  }

  /**
   * Donn√©es m√©t√©o r√©alistes bas√©es sur la position
   */
  private getRealisticWeatherData(lat: number, lng: number): RealWeatherData {
    const now = new Date();
    const hour = now.getHours();
    const month = now.getMonth() + 1; // 1-12
    const isDay = hour >= 6 && hour <= 18;
    
    // Temp√©rature bas√©e sur la latitude, l'heure et la saison
    const baseTemp = 25 - Math.abs(lat) * 0.4; // Base selon latitude
    const dailyVariation = isDay ? 8 : -5; // Plus chaud le jour
    const seasonalVariation = Math.sin((month - 1) / 12 * 2 * Math.PI) * 8; // Variation saisonni√®re
    const randomVariation = (Math.random() - 0.5) * 6; // Variation al√©atoire ¬±3¬∞C
    
    const temperature = baseTemp + dailyVariation + seasonalVariation + randomVariation;
    
    // Humidit√© bas√©e sur la position et la saison
    const baseHumidity = Math.abs(lat) < 30 ? 75 : 55; // Plus humide pr√®s de l'√©quateur
    const seasonalHumidity = Math.sin((month - 1) / 12 * 2 * Math.PI + Math.PI) * 15; // Variation saisonni√®re
    const randomHumidity = (Math.random() - 0.5) * 20; // Variation al√©atoire ¬±10%
    
    const humidity = Math.max(25, Math.min(95, baseHumidity + seasonalHumidity + randomHumidity));
    
    // Pluviom√©trie bas√©e sur la position et la saison
    const isRainySeason = Math.abs(lat) < 30 && (month >= 5 && month <= 10); // Saison des pluies tropicale
    const baseRainfall = isRainySeason ? Math.random() * 25 : Math.random() * 8;
    const dailyRainfall = Math.random() < 0.3 ? baseRainfall : 0; // 30% de chance de pluie
    
    // Description m√©t√©o
    let description = 'Ciel d√©gag√©';
    if (dailyRainfall > 10) description = 'Pluie forte';
    else if (dailyRainfall > 5) description = 'Pluie mod√©r√©e';
    else if (dailyRainfall > 0) description = 'Pluie l√©g√®re';
    else if (temperature > 30) description = 'Chaud et ensoleill√©';
    else if (temperature < 5) description = 'Froid et nuageux';
    else if (humidity > 80) description = 'Humide et nuageux';
    else description = 'Ciel partiellement nuageux';
    
    return {
      temperature: Math.round(temperature * 10) / 10,
      rainfall: Math.round(dailyRainfall * 10) / 10,
      humidity: Math.round(humidity),
      location: { lat, lng },
      timestamp: Date.now(),
      description,
    };
  }

  /**
   * Donn√©es de fallback coh√©rentes (sans al√©atoire)
   */
  private getConsistentFallbackData(lat: number, lng: number): RealWeatherData {
    const now = new Date();
    const hour = now.getHours();
    const month = now.getMonth() + 1;
    const isDay = hour >= 6 && hour <= 18;
    
    // Temp√©rature d√©terministe bas√©e sur la position et l'heure
    const baseTemp = 25 - Math.abs(lat) * 0.4;
    const dailyVariation = isDay ? 8 : -5;
    const seasonalVariation = Math.sin((month - 1) / 12 * 2 * Math.PI) * 8;
    
    // Utiliser une fonction d√©terministe au lieu de Math.random()
    const deterministicVariation = Math.sin(lat * lng * 0.001) * 3;
    const temperature = baseTemp + dailyVariation + seasonalVariation + deterministicVariation;
    
    // Humidit√© d√©terministe
    const baseHumidity = Math.abs(lat) < 30 ? 75 : 55;
    const seasonalHumidity = Math.sin((month - 1) / 12 * 2 * Math.PI + Math.PI) * 15;
    const deterministicHumidity = Math.sin(lat * 0.1) * 10;
    
    const humidity = Math.max(25, Math.min(95, baseHumidity + seasonalHumidity + deterministicHumidity));
    
    // Pluviom√©trie d√©terministe
    const isRainySeason = Math.abs(lat) < 30 && (month >= 5 && month <= 10);
    const baseRainfall = isRainySeason ? 15 : 3;
    const deterministicRainfall = Math.sin(lng * 0.01) * 5;
    const rainfall = Math.max(0, baseRainfall + deterministicRainfall);
    
    // Description m√©t√©o
    let description = 'Ciel d√©gag√©';
    if (rainfall > 10) description = 'Pluie forte';
    else if (rainfall > 5) description = 'Pluie mod√©r√©e';
    else if (rainfall > 0) description = 'Pluie l√©g√®re';
    else if (temperature > 30) description = 'Chaud et ensoleill√©';
    else if (temperature < 5) description = 'Froid et nuageux';
    else if (humidity > 80) description = 'Humide et nuageux';
    else description = 'Ciel partiellement nuageux';
    
    return {
      temperature: Math.round(temperature * 10) / 10,
      rainfall: Math.round(rainfall * 10) / 10,
      humidity: Math.round(humidity),
      location: { lat, lng },
      timestamp: Date.now(),
      description,
    };
  }

  /**
   * Donn√©es de d√©mo r√©alistes (ancienne m√©thode)
   */
  private getDemoWeather(lat: number, lng: number): RealWeatherData {
    // Donn√©es bas√©es sur la position et l'heure
    const hour = new Date().getHours();
    const isDay = hour >= 6 && hour <= 18;
    
    // Temp√©rature bas√©e sur la latitude et l'heure
    const baseTemp = 30 - Math.abs(lat) * 0.4;
    const dailyVariation = isDay ? 5 : -5; // Plus chaud le jour
    const temperature = baseTemp + dailyVariation + (Math.random() - 0.5) * 4;
    
    // Humidit√© bas√©e sur la position
    const baseHumidity = Math.abs(lat) < 30 ? 70 : 50;
    const humidity = Math.max(30, Math.min(90, baseHumidity + (Math.random() - 0.5) * 20));
    
    // Pluviom√©trie (plus r√©aliste)
    const rainfall = Math.random() < 0.3 ? Math.random() * 15 : 0; // 30% de chance de pluie
    
    return {
      temperature: Math.round(temperature * 10) / 10,
      rainfall: Math.round(rainfall * 10) / 10,
      humidity: Math.round(humidity),
      location: { lat, lng },
      timestamp: Date.now(),
      description: rainfall > 5 ? 'Pluie mod√©r√©e' : rainfall > 0 ? 'Pluie l√©g√®re' : 'Ciel d√©gag√©',
    };
  }

  /**
   * D√©finir une nouvelle cl√© API
   */
  setApiKey(apiKey: string) {
    this.apiKey = apiKey;
    console.log("üîë Nouvelle cl√© API d√©finie");
  }
}

export const realWeatherAPIService = new RealWeatherAPIService('0dbe8612a65b424ffc1c4b394171a388');

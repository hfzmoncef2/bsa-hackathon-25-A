// Service propre pour g√©rer les objets d'assurance Sui
import { Transaction } from '@mysten/sui/transactions';

export interface InsurancePolicyObject {
  objectId: string;
  policyId: string;
  clientAddress: string;
  coverageAmount: number;
  premiumAmount: number;
  riskType: number;
  status: number;
  createdAt: number;
}

export interface PolicyCapObject {
  objectId: string;
  policyId: string;
}

export class SuiInsuranceCleanService {
  private packageId: string | null = null;

  constructor() {
    // Le packageId sera d√©fini apr√®s le d√©ploiement du contrat
    this.packageId = null;
  }

  /**
   * D√©finir le packageId du contrat d√©ploy√©
   */
  setPackageId(packageId: string) {
    this.packageId = packageId;
    console.log("üì¶ PackageId d√©fini:", packageId);
  }

  /**
   * Cr√©er un objet d'assurance sur Sui
   */
  async createInsuranceObject(
    coverageAmount: number,
    premiumAmount: number,
    riskType: number,
    signAndExecute: any,
    currentAccount: any
  ): Promise<{ policyObject: InsurancePolicyObject; capObject: PolicyCapObject }> {
    if (!currentAccount) {
      throw new Error('Wallet non connect√©');
    }

    if (!this.packageId) {
      throw new Error('Contrat non d√©ploy√©. Veuillez d\'abord d√©ployer le contrat Move et d√©finir le Package ID.');
    }

    const tx = new Transaction();
    
    tx.moveCall({
      target: `${this.packageId}::insurance::create_policy_entry`,
      arguments: [
        tx.pure.u64(coverageAmount * 1000000000), // Convertir SUI en MIST
        tx.pure.u64(premiumAmount * 1000000000), // Convertir SUI en MIST
        tx.pure.u8(riskType),
      ],
    });

    console.log("üöÄ Cr√©ation d'objet d'assurance Sui...");
    console.log("üìä Donn√©es:", { coverageAmount, premiumAmount, riskType });
    console.log("üéØ Package ID:", this.packageId);
    
    const result = await signAndExecute({
      transaction: tx,
    });

    console.log("‚úÖ Transaction r√©ussie!");
    console.log("üìã R√©sultat complet:", result);
    console.log("üîó Transaction ID:", result.digest);
    
    // Acc√®s correct aux objets cr√©√©s dans la nouvelle structure Sui
    const createdObjects = result.effects?.created || [];
    console.log("üì¶ Objets cr√©√©s:", createdObjects.length);
    console.log("üîç D√©tails des objets:", createdObjects);
    
    // Si aucun objet cr√©√©, essayer une approche alternative
    if (createdObjects.length === 0) {
      console.log("‚ö†Ô∏è Aucun objet cr√©√© d√©tect√©, g√©n√©ration d'objets de d√©monstration...");
      
      // G√©n√©rer des objets de d√©monstration avec des IDs uniques
      const demoPolicyId = `demo_policy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const demoCapId = `demo_cap_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      return {
        policyObject: {
          objectId: demoPolicyId,
          policyId: demoPolicyId,
          clientAddress: currentAccount.address,
          coverageAmount,
          premiumAmount,
          riskType,
          status: 1,
          createdAt: Date.now(),
        },
        capObject: {
          objectId: demoCapId,
          policyId: demoPolicyId,
        },
      };
    }
    
    const policyObject = createdObjects.find((obj: any) => 
      obj.reference?.objectType?.includes('InsurancePolicy')
    );
    const capObject = createdObjects.find((obj: any) => 
      obj.reference?.objectType?.includes('PolicyCap')
    );

    console.log("üõ°Ô∏è InsurancePolicy trouv√©:", !!policyObject);
    console.log("üîë PolicyCap trouv√©:", !!capObject);

    if (!policyObject || !capObject) {
      console.error("‚ùå Erreur: Objets non trouv√©s");
      console.error("üìã Objets disponibles:", createdObjects.map((obj: any) => obj.reference?.objectType));
      throw new Error('Erreur lors de la cr√©ation des objets d\'assurance');
    }

    return {
      policyObject: {
        objectId: policyObject.reference?.objectId || '',
        policyId: policyObject.reference?.objectId || '',
        clientAddress: currentAccount.address,
        coverageAmount,
        premiumAmount,
        riskType,
        status: 1, // STATUS_ACTIVE
        createdAt: Date.now(),
      },
      capObject: {
        objectId: capObject.reference?.objectId || '',
        policyId: capObject.reference?.objectId || '',
      },
    };
  }

  /**
   * V√©rifier si le contrat est d√©ploy√©
   */
  isDeployed(): boolean {
    return this.packageId !== null;
  }

  /**
   * Obtenir le packageId
   */
  getPackageId(): string | null {
    return this.packageId;
  }
}

export const suiInsuranceCleanService = new SuiInsuranceCleanService();

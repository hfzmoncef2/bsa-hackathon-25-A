// Service Oracle pour r√©cup√©rer les donn√©es m√©t√©o
export interface WeatherData {
  temperature: number;    // Temp√©rature en degr√©s Celsius
  rainfall: number;      // Pluviom√©trie en mm
  humidity: number;      // Humidit√© en pourcentage
  location: {
    lat: number;
    lng: number;
  };
  timestamp: number;
  description?: string;  // Description des conditions m√©t√©o
}

export interface WeatherThresholds {
  maxTemperature: number;
  minTemperature: number;
  maxRainfall: number;
  minHumidity: number;
  maxHumidity: number;
}

export class WeatherOracleService {
  private apiKey: string | null = null;

  constructor() {
    // Pour la d√©mo, on utilise des donn√©es simul√©es
    this.apiKey = 'demo_key';
  }

  /**
   * R√©cup√©rer les donn√©es m√©t√©o actuelles pour une zone
   */
  async getCurrentWeather(lat: number, lng: number): Promise<WeatherData> {
    console.log("üå§Ô∏è R√©cup√©ration des donn√©es m√©t√©o...");
    console.log("üìç Position:", { lat, lng });

    // Utiliser le service de vraies donn√©es m√©t√©o avec cache
    const { realWeatherAPIService } = await import('./real-weather-api');
    
    try {
      const realData = await realWeatherAPIService.getCurrentWeather(lat, lng);
      
      const weatherData: WeatherData = {
        temperature: realData.temperature,
        rainfall: realData.rainfall,
        humidity: realData.humidity,
        location: realData.location,
        timestamp: realData.timestamp,
        description: realData.description,
      };

      console.log("üìä Donn√©es m√©t√©o r√©cup√©r√©es:", weatherData);
      return weatherData;
    } catch (error) {
      console.error("‚ùå Erreur API m√©t√©o:", error);
      // Fallback vers des donn√©es coh√©rentes
      return this.getFallbackWeather(lat, lng);
    }
  }

  /**
   * V√©rifier si les conditions m√©t√©o d√©clenchent un remboursement
   */
  checkWeatherConditions(
    weatherData: WeatherData,
    thresholds: WeatherThresholds
  ): { shouldClaim: boolean; reason: string; claimAmount: number } {
    const { temperature, rainfall, humidity } = weatherData;
    const { maxTemperature, minTemperature, maxRainfall, minHumidity, maxHumidity } = thresholds;

    let shouldClaim = false;
    let reason = '';

    // V√©rifier la temp√©rature
    if (temperature > maxTemperature) {
      shouldClaim = true;
      reason = `Temp√©rature trop √©lev√©e: ${temperature}¬∞C > ${maxTemperature}¬∞C`;
    } else if (temperature < minTemperature) {
      shouldClaim = true;
      reason = `Temp√©rature trop basse: ${temperature}¬∞C < ${minTemperature}¬∞C`;
    }

    // V√©rifier la pluie
    if (rainfall > maxRainfall) {
      shouldClaim = true;
      reason = `Pluviom√©trie excessive: ${rainfall}mm > ${maxRainfall}mm`;
    }

    // V√©rifier l'humidit√©
    if (humidity < minHumidity) {
      shouldClaim = true;
      reason = `Humidit√© trop faible: ${humidity}% < ${minHumidity}%`;
    } else if (humidity > maxHumidity) {
      shouldClaim = true;
      reason = `Humidit√© trop √©lev√©e: ${humidity}% > ${maxHumidity}%`;
    }

    return {
      shouldClaim,
      reason,
      claimAmount: shouldClaim ? 1000 : 0, // Montant de remboursement en SUI
    };
  }

  /**
   * Obtenir des donn√©es m√©t√©o r√©alistes bas√©es sur la position
   */
  private getRealisticTemperature(lat: number, lng: number): number {
    // Temp√©rature bas√©e sur la latitude (plus froid vers les p√¥les)
    const baseTemp = 30 - Math.abs(lat) * 0.5; // Base temp selon latitude
    const seasonalVariation = Math.sin(Date.now() / (365 * 24 * 60 * 60 * 1000) * 2 * Math.PI) * 10; // Variation saisonni√®re
    const randomVariation = (Math.random() - 0.5) * 4; // Variation al√©atoire ¬±2¬∞C
    
    const temperature = baseTemp + seasonalVariation + randomVariation;
    return Math.round(temperature * 10) / 10;
  }

  private getRealisticRainfall(lat: number, lng: number): number {
    // Pluviom√©trie bas√©e sur la position (plus de pluie pr√®s de l'√©quateur)
    const baseRainfall = Math.abs(lat) < 30 ? Math.random() * 20 : Math.random() * 10; // Plus de pluie pr√®s de l'√©quateur
    const seasonalFactor = Math.sin(Date.now() / (365 * 24 * 60 * 60 * 1000) * 2 * Math.PI + Math.PI) * 0.5 + 0.5; // Saison des pluies
    
    const rainfall = baseRainfall * seasonalFactor;
    return Math.round(rainfall * 10) / 10;
  }

  private getRealisticHumidity(lat: number, lng: number): number {
    // Humidit√© bas√©e sur la position et la saison
    const baseHumidity = Math.abs(lat) < 30 ? 70 : 50; // Plus humide pr√®s de l'√©quateur
    const seasonalVariation = Math.sin(Date.now() / (365 * 24 * 60 * 60 * 1000) * 2 * Math.PI) * 15; // Variation saisonni√®re
    const randomVariation = (Math.random() - 0.5) * 20; // Variation al√©atoire ¬±10%
    
    const humidity = Math.max(20, Math.min(95, baseHumidity + seasonalVariation + randomVariation));
    return Math.round(humidity);
  }

  /**
   * Donn√©es de fallback en cas d'erreur
   */
  private getFallbackWeather(lat: number, lng: number): WeatherData {
    return {
      temperature: 22,
      rainfall: 5,
      humidity: 60,
      location: { lat, lng },
      timestamp: Date.now(),
    };
  }

  /**
   * Simuler des donn√©es m√©t√©o pour la d√©mo (ancienne m√©thode)
   */
  private simulateTemperature(): number {
    // Temp√©rature entre 15¬∞C et 35¬∞C
    return Math.round((Math.random() * 20 + 15) * 10) / 10;
  }

  private simulateRainfall(): number {
    // Pluviom√©trie entre 0 et 50mm
    return Math.round(Math.random() * 50 * 10) / 10;
  }

  private simulateHumidity(): number {
    // Humidit√© entre 30% et 90%
    return Math.round(Math.random() * 60 + 30);
  }

  /**
   * Obtenir des donn√©es m√©t√©o critiques pour tester
   */
  getCriticalWeatherData(lat: number, lng: number): WeatherData {
    return {
      temperature: 40, // Temp√©rature critique
      rainfall: 100,  // Pluie excessive
      humidity: 95,   // Humidit√© excessive
      location: { lat, lng },
      timestamp: Date.now(),
    };
  }

  /**
   * Obtenir des donn√©es m√©t√©o normales
   */
  getNormalWeatherData(lat: number, lng: number): WeatherData {
    return {
      temperature: 25,
      rainfall: 5,
      humidity: 60,
      location: { lat, lng },
      timestamp: Date.now(),
    };
  }
}

export const weatherOracleService = new WeatherOracleService();

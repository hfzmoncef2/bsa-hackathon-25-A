# Script PowerShell CORRIG√â pour d√©ployer et tester le contrat d'assurance
# Ce script garantit que les objets apparaissent dans le wallet

Write-Host "üöÄ D√©ploiement CORRIG√â du contrat RainGuard Insurance" -ForegroundColor Green
Write-Host "=====================================================" -ForegroundColor Green

# Variables
$MOVE_TOML = "Move.toml"

# V√©rifier que nous sommes dans le bon r√©pertoire
if (-not (Test-Path $MOVE_TOML)) {
    Write-Host "‚ùå Erreur: Move.toml non trouv√©. Ex√©cutez ce script depuis la racine du projet." -ForegroundColor Red
    exit 1
}

Write-Host "üìã Configuration du projet..." -ForegroundColor Yellow

# V√©rifier la configuration Move.toml
$moveTomlContent = Get-Content $MOVE_TOML -Raw
if ($moveTomlContent -match "name = `"rainguard`"") {
    Write-Host "‚úÖ Configuration Move.toml correcte" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erreur: Move.toml doit contenir 'name = `"rainguard`"'" -ForegroundColor Red
    exit 1
}

Write-Host "üî® Construction du contrat..." -ForegroundColor Yellow
try {
    sui move build
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Construction r√©ussie!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur de construction" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors de la construction: $_" -ForegroundColor Red
    exit 1
}

Write-Host "üöÄ D√©ploiement du contrat..." -ForegroundColor Yellow
try {
    $deployResult = sui client publish --gas-budget 100000000
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ D√©ploiement r√©ussi!" -ForegroundColor Green
        
        # Extraire le Package ID
        $packageId = ($deployResult | Select-String "Created Objects:" -A 10 | Select-String "0x[a-f0-9]{64}").Matches[0].Value
        Write-Host "üì¶ Package ID: $packageId" -ForegroundColor Cyan
        
        # Sauvegarder le Package ID
        $packageId | Out-File -FilePath "package_id.txt" -Encoding UTF8
        Write-Host "üíæ Package ID sauvegard√© dans package_id.txt" -ForegroundColor Cyan
        
        # Mettre √† jour le frontend avec le nouveau Package ID
        Write-Host "üîÑ Mise √† jour du frontend..." -ForegroundColor Yellow
        
        # Mettre √† jour CreateInsuranceContract.tsx
        $frontendFile = "app/CreateInsuranceContract.tsx"
        if (Test-Path $frontendFile) {
            $content = Get-Content $frontendFile -Raw
            $content = $content -replace "0xd28e4cf0eeaa232ceb08f293cc8d2f76ea719aa8b31a691fe11a9966b862b566", $packageId
            $content | Set-Content $frontendFile -Encoding UTF8
            Write-Host "‚úÖ Frontend mis √† jour avec le nouveau Package ID" -ForegroundColor Green
        }
        
        # Mettre √† jour WalletDisplayTest.tsx
        $testFile = "app/components/WalletDisplayTest.tsx"
        if (Test-Path $testFile) {
            $content = Get-Content $testFile -Raw
            $content = $content -replace "0xd28e4cf0eeaa232ceb08f293cc8d2f76ea719aa8b31a691fe11a9966b862b566", $packageId
            $content | Set-Content $testFile -Encoding UTF8
            Write-Host "‚úÖ Composant de test mis √† jour" -ForegroundColor Green
        }
        
    } else {
        Write-Host "‚ùå Erreur de d√©ploiement" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erreur lors du d√©ploiement: $_" -ForegroundColor Red
    exit 1
}

Write-Host "üß™ Test de cr√©ation d'une police d'assurance..." -ForegroundColor Yellow

# Cr√©er un script de test temporaire avec le bon Package ID
$testScript = @"
import { SuiClient, getFullnodeUrl } from '@mysten/sui.js/client';
import { TransactionBlock } from '@mysten/sui.js/transactions';
import { Ed25519Keypair } from '@mysten/sui.js/keypairs/ed25519';

const client = new SuiClient({ url: getFullnodeUrl('devnet') });
const PACKAGE_ID = '$packageId';

async function testCreatePolicy() {
    console.log('üöÄ Test de cr√©ation d\'une police d\'assurance...');
    console.log('üì¶ Package ID:', PACKAGE_ID);
    
    // Cr√©er une cl√© de test
    const keypair = Ed25519Keypair.deriveKeypair('test-secret-phrase-for-wallet-display');
    const userAddress = keypair.getPublicKey().toSuiAddress();
    
    console.log('üë§ Adresse de test:', userAddress);
    
    const txb = new TransactionBlock();
    
    // Appeler create_simple_policy avec les bons arguments
    txb.moveCall({
        target: `\${PACKAGE_ID}::working_insurance::create_simple_policy`,
        arguments: [
            txb.pure.u64(1000000000), // 1 SUI en MIST
            txb.pure.u64(100000000),  // 0.1 SUI en MIST
        ],
    });

    try {
        const result = await client.signAndExecuteTransactionBlock({
            transactionBlock: txb,
            signer: keypair,
            options: {
                showEffects: true,
                showObjectChanges: true,
            },
        });

        console.log('‚úÖ Transaction r√©ussie!');
        console.log('üìã Digest:', result.digest);
        
        // Analyser les objets cr√©√©s
        const createdObjects = result.objectChanges?.filter(
            (change) => change.type === 'created'
        );

        if (createdObjects && createdObjects.length > 0) {
            console.log('üéâ Objets cr√©√©s dans le wallet:');
            createdObjects.forEach((obj, index) => {
                console.log(`  \${index + 1}. Type: \${obj.objectType}`);
                console.log(`     ID: \${obj.objectId}`);
                console.log(`     Owner: \${obj.owner}`);
            });
            
            // V√©rifier les objets sp√©cifiques
            const insurancePolicy = createdObjects.find(obj => 
                obj.objectType?.includes('InsurancePolicy')
            );
            const policyCap = createdObjects.find(obj => 
                obj.objectType?.includes('PolicyCap')
            );
            
            if (insurancePolicy) {
                console.log('‚úÖ Objet InsurancePolicy trouv√©! Il devrait appara√Ætre dans votre wallet.');
                console.log(`   ID: \${insurancePolicy.objectId}`);
            } else {
                console.log('‚ùå Aucun objet InsurancePolicy trouv√©');
            }
            
            if (policyCap) {
                console.log('‚úÖ Objet PolicyCap trouv√©! Il devrait appara√Ætre dans votre wallet.');
                console.log(`   ID: \${policyCap.objectId}`);
            } else {
                console.log('‚ùå Aucun objet PolicyCap trouv√©');
            }
            
        } else {
            console.log('‚ùå Aucun objet cr√©√© trouv√©');
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation:', error);
    }
}

testCreatePolicy();
"@

$testScript | Out-File -FilePath "test-policy-creation.js" -Encoding UTF8

Write-Host "üìù Script de test cr√©√©: test-policy-creation.js" -ForegroundColor Cyan
Write-Host "üîß Pour tester, ex√©cutez: node test-policy-creation.js" -ForegroundColor Cyan

Write-Host ""
Write-Host "üéØ R√âSUM√â DES CORRECTIONS APPORT√âES:" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green
Write-Host "‚úÖ 1. Move.toml corrig√©: name = 'rainguard'" -ForegroundColor Green
Write-Host "‚úÖ 2. Frontend corrig√© pour utiliser create_simple_policy" -ForegroundColor Green
Write-Host "‚úÖ 3. Arguments corrig√©s (seulement coverage et premium)" -ForegroundColor Green
Write-Host "‚úÖ 4. Package ID automatiquement mis √† jour" -ForegroundColor Green
Write-Host "‚úÖ 5. Script de test cr√©√© avec le bon Package ID" -ForegroundColor Green

Write-Host ""
Write-Host "üöÄ PROCHAINES √âTAPES:" -ForegroundColor Yellow
Write-Host "===================" -ForegroundColor Yellow
Write-Host "1. Ex√©cutez: npm run dev" -ForegroundColor White
Write-Host "2. Connectez votre wallet Sui" -ForegroundColor White
Write-Host "3. Utilisez le composant WalletDisplayTest" -ForegroundColor White
Write-Host "4. Cr√©ez une police d'assurance" -ForegroundColor White
Write-Host "5. V√©rifiez votre wallet Sui - les objets DOIVENT √™tre l√†!" -ForegroundColor White

Write-Host ""
Write-Host "üí° NOUVEAU PACKAGE ID:" -ForegroundColor Cyan
Write-Host "PACKAGE_ID = $packageId" -ForegroundColor Cyan

Write-Host ""
Write-Host "üéâ Le contrat est maintenant CORRIG√â et les objets DEVRAIENT appara√Ætre dans le wallet!" -ForegroundColor Green